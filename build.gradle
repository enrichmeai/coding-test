/*
 * This build script includes tasks for running integration tests after a successful build:
 *
 * 1. The 'integrationTest' task runs after the 'build' task completes successfully
 * 2. It starts the Spring Boot application using 'startApp'
 * 3. It runs Postman tests using Newman via 'runPostmanTests'
 * 4. Finally, it stops the application using 'stopApp'
 *
 * To run the build with integration tests:
 *   ./gradlew build
 *
 * To run only the integration tests (without rebuilding):
 *   ./gradlew integrationTest
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'org.owasp.dependencycheck' version '8.4.3'
    id 'com.github.spotbugs' version '5.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Add Netty DNS resolver for MacOS to fix DNS resolution issues
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.100.Final:osx-x86_64'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.100.Final:osx-aarch_64'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Security plugins
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // Always run tests during build, never consider them up-to-date
    outputs.upToDateWhen { false }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/model/**',
                    '**/config/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 100
}

pmd {
    toolVersion = '6.55.0'
    ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
    ignoreFailures = true
    ruleSets = []
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}


// Task to run Postman tests using Newman
tasks.register('runPostmanTests', Exec) {
    workingDir '.'
    commandLine 'npm', 'run', 'postman'

    // Make the task fail if the Postman tests fail
    ignoreExitValue = false

    // Make sure the application is started before running the tests
    dependsOn startApp
}

// Task to start the application for integration testing
tasks.register('startApp') {
    group = 'application'
    description = 'Starts the Spring Boot application for integration testing'

    doLast {
        println "Starting the application for integration testing..."

        // Start the application in a separate process
        def processBuilder = new ProcessBuilder()

        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            processBuilder.command('cmd', '/c', 'start', '/b', 'gradlew.bat', 'bootRun')
        } else {
            processBuilder.command('sh', '-c', './gradlew bootRun &')
        }

        processBuilder.directory(new File('.'))
        def process = processBuilder.start()

        // Wait for the application to start up and be ready
        println "Waiting for application to start..."

        // Health check - try to connect to the application
        boolean isAppReady = false
        int maxRetries = 30
        int retryCount = 0

        while (!isAppReady && retryCount < maxRetries) {
            try {
                URL url = new URL("http://localhost:8080/api/weather")
                HttpURLConnection connection = (HttpURLConnection) url.openConnection()
                connection.setRequestMethod("GET")
                connection.setConnectTimeout(1000)
                connection.setReadTimeout(1000)

                int responseCode = connection.getResponseCode()
                if (responseCode >= 200 && responseCode < 300) {
                    isAppReady = true
                    println "Application is ready! (Response code: ${responseCode})"
                } else {
                    println "Application not ready yet. Response code: ${responseCode}"
                }

                connection.disconnect()
            } catch (Exception e) {
                println "Waiting for application to start... (${retryCount + 1}/${maxRetries})"
            }

            if (!isAppReady) {
                Thread.sleep(2000) // Wait 2 seconds before retrying
                retryCount++
            }
        }

        if (!isAppReady) {
            throw new GradleException("Application failed to start within the expected time")
        }

        println "Application is running and ready for tests."
    }
}

// Task to stop the application after testing
tasks.register('stopApp') {
    group = 'application'
    description = 'Stops the Spring Boot application after integration testing'

    doLast {
        // Find and kill the Spring Boot process
        println "Stopping the application after integration testing..."

        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            exec {
                commandLine 'cmd', '/c', 'for /f "tokens=5" %p in (\'netstat -ano ^| findstr :8080\') do taskkill /F /PID %p'
                ignoreExitValue true
            }
        } else {
            exec {
                commandLine 'sh', '-c', 'lsof -i :8080 -t | xargs kill -9 || true'
                ignoreExitValue true
            }
        }
    }
}

// Task to run all integration tests
tasks.register('integrationTest') {
    group = 'verification'
    description = 'Runs all integration tests (Postman)'

    // Make this task depend on the test tasks
    dependsOn runPostmanTests

    // Define the task execution order
    doLast {
        println "Integration tests completed successfully!"
    }
}

// Task to run only Postman tests
tasks.register('runPostmanIntegrationTest') {
    group = 'verification'
    description = 'Runs only Postman integration tests'

    dependsOn startApp
    finalizedBy stopApp

    doLast {
        println "Postman integration tests completed successfully!"
    }
}


// Task to build and run all integration tests
tasks.register('buildAndRunIntegrationTests') {
    group = 'verification'
    description = 'Builds the project and runs all integration tests'

    dependsOn build
    finalizedBy integrationTest

    doLast {
        println "Build and integration tests completed successfully!"
    }
}

// Task to build and run only Postman tests
tasks.register('buildAndRunPostmanTests') {
    group = 'verification'
    description = 'Builds the project and runs only Postman integration tests'

    dependsOn build
    finalizedBy runPostmanIntegrationTest

    doLast {
        println "Build and Postman tests completed successfully!"
    }
}


// Configure the task dependencies
integrationTest.dependsOn startApp
integrationTest.finalizedBy stopApp

// Configure the Postman-only integration test
runPostmanIntegrationTest.dependsOn startApp
runPostmanTests.finalizedBy stopApp

// Hook into the build lifecycle
// Note: We're not finalizing the build with integrationTest anymore
// to allow separate execution of integration tests

// Configure OWASP Dependency Check
dependencyCheck {
    failBuildOnCVSS = 7  // Fail the build for CVSS scores >= 7 (high severity)
    formats = ['HTML', 'XML', 'JSON']
    outputDirectory = "${buildDir}/reports/dependency-check"
    suppressionFile = file("${rootDir}/config/dependency-check/suppressions.xml")
    analyzers {
        assemblyEnabled = false
        nodeEnabled = false  // Disable Node.js analysis if not needed
    }
}

// Configure SpotBugs
spotbugs {
    toolVersion = '4.7.3'
    ignoreFailures = true  // Set to true to prevent build failures due to SpotBugs issues
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")

    // Exclude problematic detectors - using short detector name
    omitVisitors = ['SpringEntityLeakDetector']

    // Set maximum heap size to avoid memory issues
    maxHeapSize = '1g'
}

spotbugsMain {
    reports {
        create('html') {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/main.html")
            stylesheet = 'fancy-hist.xsl'
        }
        create('xml') {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/main.xml")
        }
    }
}

// Task to run all security checks
tasks.register('securityCheck') {
    group = 'verification'
    description = 'Runs all security vulnerability checks'

    dependsOn dependencyCheckAnalyze, spotbugsMain

    doLast {
        println "Security vulnerability checks completed successfully!"
    }
}
